
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Dec 03 00:52:36 JST 2015
//----------------------------------------------------

package BimsS;


/** CUP v0.10k generated parser.
  * @version Thu Dec 03 00:52:36 JST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\037\000\002\002\004\000\002\003\003\000\002\004" +
    "\005\000\002\004\003\000\002\004\016\000\002\004\012" +
    "\000\002\004\004\000\002\004\004\000\002\004\007\000" +
    "\002\005\002\000\002\005\003\000\002\005\005\000\002" +
    "\006\003\000\002\006\006\000\002\007\005\000\002\007" +
    "\005\000\002\007\003\000\002\010\004\000\002\010\005" +
    "\000\002\010\003\000\002\011\003\000\002\012\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\005\000\002\014\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\005\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\020\002\ufff8\024\012\025\011\027\007\030" +
    "\010\032\006\034\013\001\002\000\004\002\000\001\002" +
    "\000\004\002\113\001\002\000\004\005\104\001\002\000" +
    "\004\034\013\001\002\000\010\002\ufffe\010\ufffe\013\ufffe" +
    "\001\002\000\004\034\077\001\002\000\004\005\043\001" +
    "\002\000\032\002\ufff5\004\ufff5\006\ufff5\010\ufff5\011\040" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017\ufff5\020\ufff5\021" +
    "\ufff5\001\002\000\010\002\ufff7\010\ufff7\013\036\001\002" +
    "\000\004\004\016\001\002\000\010\005\017\033\020\034" +
    "\013\001\002\000\010\005\017\033\020\034\013\001\002" +
    "\000\026\002\uffe5\006\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\001\002\000\026" +
    "\002\uffe7\006\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\017\uffe7\020\uffe7\021\uffe7\001\002\000\026\002\uffe9" +
    "\006\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\017" +
    "\uffe9\020\uffe9\021\031\001\002\000\010\002\uffff\010\uffff" +
    "\013\uffff\001\002\000\024\002\uffe3\006\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\017\027\020\026\001\002" +
    "\000\026\002\uffe6\006\uffe6\010\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\001\002\000\010" +
    "\005\017\033\020\034\013\001\002\000\010\005\017\033" +
    "\020\034\013\001\002\000\026\002\uffeb\006\uffeb\010\uffeb" +
    "\012\uffeb\013\uffeb\014\uffeb\015\uffeb\017\uffeb\020\uffeb\021" +
    "\031\001\002\000\010\005\017\033\020\034\013\001\002" +
    "\000\026\002\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\021\uffe8\001\002\000\026" +
    "\002\uffea\006\uffea\010\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\017\uffea\020\uffea\021\031\001\002\000\004\006\035" +
    "\001\002\000\026\002\uffe4\006\uffe4\010\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\017\uffe4\020\uffe4\021\uffe4\001\002" +
    "\000\022\002\ufff8\010\ufff8\024\012\025\011\027\007\030" +
    "\010\032\006\034\013\001\002\000\006\002\ufff6\010\ufff6" +
    "\001\002\000\010\005\017\033\020\034\013\001\002\000" +
    "\004\012\042\001\002\000\030\002\ufff4\004\ufff4\006\ufff4" +
    "\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\001\002\000\012\005\050\026\052\033\020" +
    "\034\013\001\002\000\006\006\uffee\016\uffee\001\002\000" +
    "\004\006\066\001\002\000\006\006\uffed\016\064\001\002" +
    "\000\004\006\ufff1\001\002\000\012\005\050\026\052\033" +
    "\020\034\013\001\002\000\006\014\060\015\057\001\002" +
    "\000\004\005\054\001\002\000\006\006\ufff0\016\ufff0\001" +
    "\002\000\012\005\050\026\052\033\020\034\013\001\002" +
    "\000\004\006\056\001\002\000\006\006\uffec\016\uffec\001" +
    "\002\000\010\005\017\033\020\034\013\001\002\000\010" +
    "\005\017\033\020\034\013\001\002\000\004\006\ufff3\001" +
    "\002\000\004\006\ufff2\001\002\000\010\006\035\014\060" +
    "\015\057\001\002\000\004\005\054\001\002\000\006\006" +
    "\uffef\016\uffef\001\002\000\004\031\067\001\002\000\004" +
    "\007\070\001\002\000\020\010\ufff8\024\012\025\011\027" +
    "\007\030\010\032\006\034\013\001\002\000\004\010\072" +
    "\001\002\000\004\023\073\001\002\000\004\007\074\001" +
    "\002\000\020\010\ufff8\024\012\025\011\027\007\030\010" +
    "\032\006\034\013\001\002\000\004\010\076\001\002\000" +
    "\010\002\ufffd\010\ufffd\013\ufffd\001\002\000\012\002\ufffa" +
    "\010\ufffa\011\100\013\ufffa\001\002\000\010\005\017\033" +
    "\020\034\013\001\002\000\004\012\102\001\002\000\010" +
    "\002\ufff9\010\ufff9\013\ufff9\001\002\000\010\002\ufffb\010" +
    "\ufffb\013\ufffb\001\002\000\012\005\050\026\052\033\020" +
    "\034\013\001\002\000\004\006\106\001\002\000\004\022" +
    "\107\001\002\000\004\007\110\001\002\000\020\010\ufff8" +
    "\024\012\025\011\027\007\030\010\032\006\034\013\001" +
    "\002\000\004\010\112\001\002\000\010\002\ufffc\010\ufffc" +
    "\013\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\111\000\012\003\004\004\013\005\003\006\014\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\024\013\023\014\021\015" +
    "\020\016\022\001\001\000\014\006\024\013\023\014\021" +
    "\015\020\016\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\024\014\032\015\020\001" +
    "\001\000\010\006\024\014\027\015\020\001\001\000\002" +
    "\001\001\000\006\006\024\015\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\013\005\036\006\014\001\001\000\002\001" +
    "\001\000\014\006\024\013\023\014\021\015\020\016\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\024\007\044\010\045\011\046\012\043\013\023\014\021" +
    "\015\020\016\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\024" +
    "\007\054\010\045\011\046\012\043\013\023\014\021\015" +
    "\020\016\062\001\001\000\002\001\001\000\004\012\052" +
    "\001\001\000\002\001\001\000\024\006\024\007\054\010" +
    "\045\011\046\012\043\013\023\014\021\015\020\016\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\024\013\023\014\021\015\020\016\061\001\001\000\014" +
    "\006\024\013\023\014\021\015\020\016\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\013\005\070\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\013\005\074\006\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\006\024\013" +
    "\023\014\021\015\020\016\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\024\007" +
    "\104\010\045\011\046\012\043\013\023\014\021\015\020" +
    "\016\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\013\005\110\006\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public BimsS.Absyn.Program pProgram() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (BimsS.Absyn.Program) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AExp ::= AExp1 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*AExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AExp3 ::= _SYMB_1 AExp _SYMB_2 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_2 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*AExp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // AExp3 ::= _INTEGER_ 
            {
              BimsS.Absyn.AExp RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.AInt(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*AExp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // AExp3 ::= Var 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.Var p_1 = (BimsS.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.AVar(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*AExp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // AExp2 ::= AExp3 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*AExp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // AExp2 ::= AExp2 _SYMB_13 AExp3 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.ATimes(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*AExp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // AExp1 ::= AExp2 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*AExp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AExp1 ::= AExp1 _SYMB_12 AExp2 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.AMinus(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*AExp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AExp1 ::= AExp1 _SYMB_11 AExp2 
            {
              BimsS.Absyn.AExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.APlus(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*AExp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BExp3 ::= _SYMB_1 BExp _SYMB_2 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.BExp p_2 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_2; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*BExp3*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BExp1 ::= BExp2 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.BExp p_1 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*BExp1*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BExp2 ::= BExp3 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.BExp p_1 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*BExp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BExp2 ::= BExp2 _SYMB_10 BExp3 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.BExp p_1 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.BExp p_3 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.BAnd(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*BExp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BExp2 ::= _SYMB_18 BExp3 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.BExp p_2 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.BNeg(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*BExp2*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BExp ::= BExp1 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.BExp p_1 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*BExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BExp ::= AExp _SYMB_9 AExp 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.BGt(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*BExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BExp ::= AExp _SYMB_8 AExp 
            {
              BimsS.Absyn.BExp RESULT = null;
		BimsS.Absyn.AExp p_1 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.BEq(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*BExp*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Var ::= _IDENT_ _SYMB_5 AExp _SYMB_6 
            {
              BimsS.Absyn.Var RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BimsS.Absyn.VMult(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Var*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Var ::= _IDENT_ 
            {
              BimsS.Absyn.Var RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.VSolo(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*Var*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ListStm ::= Stm _SYMB_7 ListStm 
            {
              BimsS.Absyn.ListStm RESULT = null;
		BimsS.Absyn.Stm p_1 = (BimsS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.ListStm p_3 = (BimsS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_3; p_3.addFirst(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ListStm ::= Stm 
            {
              BimsS.Absyn.ListStm RESULT = null;
		BimsS.Absyn.Stm p_1 = (BimsS.Absyn.Stm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.ListStm(); RESULT.addLast(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListStm ::= 
            {
              BimsS.Absyn.ListStm RESULT = null;
		 RESULT = new BimsS.Absyn.ListStm(); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*ListStm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Stm ::= _SYMB_17 _IDENT_ _SYMB_5 AExp _SYMB_6 
            {
              BimsS.Absyn.Stm RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		BimsS.Absyn.AExp p_4 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BimsS.Absyn.SIntArr(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Stm ::= _SYMB_17 _IDENT_ 
            {
              BimsS.Absyn.Stm RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.SInt(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Stm ::= _SYMB_19 Var 
            {
              BimsS.Absyn.Stm RESULT = null;
		BimsS.Absyn.Var p_2 = (BimsS.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.SPrint(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Stm ::= _SYMB_22 _SYMB_1 BExp _SYMB_2 _SYMB_14 _SYMB_3 ListStm _SYMB_4 
            {
              BimsS.Absyn.Stm RESULT = null;
		BimsS.Absyn.BExp p_3 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		BimsS.Absyn.ListStm p_7 = (BimsS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BimsS.Absyn.SWhile(p_3,p_7); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Stm ::= _SYMB_16 _SYMB_1 BExp _SYMB_2 _SYMB_21 _SYMB_3 ListStm _SYMB_4 _SYMB_15 _SYMB_3 ListStm _SYMB_4 
            {
              BimsS.Absyn.Stm RESULT = null;
		BimsS.Absyn.BExp p_3 = (BimsS.Absyn.BExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		BimsS.Absyn.ListStm p_7 = (BimsS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		BimsS.Absyn.ListStm p_11 = (BimsS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BimsS.Absyn.SIf(p_3,p_7,p_11); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Stm ::= _SYMB_20 
            {
              BimsS.Absyn.Stm RESULT = null;
		 RESULT = new BimsS.Absyn.SSkip(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Stm ::= Var _SYMB_0 AExp 
            {
              BimsS.Absyn.Stm RESULT = null;
		BimsS.Absyn.Var p_1 = (BimsS.Absyn.Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		BimsS.Absyn.AExp p_3 = (BimsS.Absyn.AExp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.SAss(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*Stm*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= ListStm 
            {
              BimsS.Absyn.Program RESULT = null;
		BimsS.Absyn.ListStm p_1 = (BimsS.Absyn.ListStm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new BimsS.Absyn.PDefs(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		BimsS.Absyn.Program start_val = (BimsS.Absyn.Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

